#!/usr/bin/python3

import sys, os, types, inspect
from settings import config
from context import test_context
from tool_box import *
from set_up import set_up
from mount_union import mount_union
from unmount_union import unmount_union
from direct import direct_open_file, direct_fs_op

def show_format(why):
    if why:
        print(why)
    print("Format:")
    print("\t", sys.argv[0], "<--um|--ov|--no> [--ts=[01]] [-v] [<test-name>+]")
    print("\t", sys.argv[0], "<--um|--ov|--no> --set-up")
    print("\t", sys.argv[0], "--open-file <file> [-acdertvw] [-W <data>] [-R <data>] [-B] [-E <err>]")
    print("\t", sys.argv[0], "--<fsop> <file> [<args>*] [-aLlv] [-R <content>] [-B] [-E <err>]")
    sys.exit(2)

if len(sys.argv) < 2:
    show_format("Insufficient arguments")

cfg = config(sys.argv[0])
args = sys.argv[1:]

###############################################################################
#
# Handle requests to perform single probes
#
###############################################################################
if args[0] == "--open-file":
    try:
        direct_open_file(cfg, args[1:])
    except ArgumentError as ae:
        show_format(str(ae))
    except TestError as te:
        print(te)
        sys.exit(1)
    sys.exit(0)

if (args[0] == "--chmod" or
    args[0] == "--link" or
    args[0] == "--mkdir" or
    args[0] == "--readlink" or
    args[0] == "--rename" or
    args[0] == "--rmdir" or
    args[0] == "--truncate" or
    args[0] == "--unlink" or
    args[0] == "--utimes"):
    try:
        direct_fs_op(cfg, args)
        sys.exit(0)
    except ArgumentError as ae:
        show_format(str(ae))
    except TestError as te:
        print(te)
        sys.exit(1)
    sys.exit(0)

###############################################################################
#
# Unmount old attempts
#
###############################################################################
try:
    while True:
        system("umount " + lower_mntroot)
except:
    pass

try:
    while True:
        system("umount " + upper_mntroot)
except:
    pass

try:
    while True:
        system("umount " + union_mntroot)
except:
    pass

###############################################################################
#
# Work out the test parameters
#
###############################################################################
if args[0] == "--um":
    cfg.set_testing_unionmount()
elif args[0] == "--ov":
    cfg.set_testing_overlayfs()
elif args[0] == "--no":
    cfg.set_testing_none()
else:
    show_format("Invalid test type selector (--um, --ov or --no)")

args = args[1:]

# We might be being asked to just set up and then leave without doing
# any further testing.
if len(args) > 0 and args[0] == "--set-up":
    if len(args) > 1:
        show_format("Too many arguments for --set-up")
    ctx = test_context(cfg)
    set_up(ctx)
    mount_union(ctx)
    sys.exit(0)


termslash_list = [ "0", "1" ]
while len(args) > 0 and args[0].startswith("-"):
    if args[0] == "-v":
        cfg.set_verbose()
    elif args[0] == "--ts=0":
        termslash_list = [ "0" ]
    elif args[0] == "--ts=1":
        termslash_list = [ "1" ]
    else:
        show_format("Invalid flag " + args[0])
    args = args[1:]

###############################################################################
#
# Work out the list of tests to run
#
###############################################################################
tests = [
    "open-plain",
    "open-trunc",
    "open-creat",
    "open-creat-trunc",
    "open-creat-excl",
    "open-creat-excl-trunc",
    "noent-plain",
    "noent-trunc",
    "noent-creat",
    "noent-creat-trunc",
    "noent-creat-excl",
    "noent-creat-excl-trunc",
    "sym1-plain",
    "sym1-trunc",
    "sym1-creat",
    "sym1-creat-excl",
    "sym2-plain",
    "sym2-trunc",
    "sym2-creat",
    "sym2-creat-excl",
    "symx-plain",
    "symx-trunc",
    "symx-creat",
    "symx-creat-excl",
    "symx-creat-trunc",
    "truncate",
    "dir-open",
    "dir-weird-open",
    "dir-open-dir",
    "dir-weird-open-dir",
    "dir-sym1-open",
    "dir-sym1-weird-open",
    "dir-sym2-open",
    "dir-sym2-weird-open",
    "readlink",
    "mkdir",
    "rmdir",
    "hard-link",
    "hard-link-dir",
    "hard-link-sym",
    "unlink",
    "rename-file",
    "rename-empty-dir",
    "rename-new-dir",
    "rename-pop-dir",
    "rename-new-pop-dir",
    "rename-move-dir",
    "rename-mass",
    "rename-mass-2",
    "rename-mass-3",
    "rename-mass-4",
    "rename-mass-5",
    "rename-mass-dir",
    "rename-mass-sym",
    "impermissible"
    ]

if len(args) > 0:
    tests = args

if cfg.testing_unionmount():
    test_what = "--um"
elif cfg.testing_overlayfs():
    test_what = "--ov"
else:
    test_what = "--no"

for test in tests:
    for ts in termslash_list:
        print("***");
        print("***", cfg.progname(), test_what, "--ts=" + ts, test);
        print("***");

        ctx = test_context(cfg, ts == "1")

        # Construct the union
        set_up(ctx)
        mount_union(ctx)
        if sys.version_info[0] == 2:
            import ctypes
            libc = ctypes.CDLL("libc.so.6")
            libc.sync()
        else:
            os.sync()

        # Run a test script
        script = __import__("tests." + test, globals(), locals(), ['subtests'])
        try:
            subtests = []
            for name in dir(script):
                if not name.startswith("subtest_"):
                    continue
                subtest = getattr(script, name)
                if type(subtest) != types.FunctionType:
                    continue
                subtests.append((inspect.getfile(subtest),
                                 inspect.getsourcelines(subtest)[1],
                                 subtest.__doc__,
                                 subtest))

            # Perform the subtests in the order they're defined in the file
            for (f, line, doc, func) in sorted(subtests, key=lambda s: s[1]):
                ctx.begin_test(f, line, doc)
                func(ctx)

        except TestError as te:
            print(te)
            sys.exit(1)

        # Stop if the kernel is now tainted
        check_not_tainted()

        # Make sure that all dentries and inodes are correctly released
        unmount_union(ctx)
        del ctx

# Leave the union mounted for further playing
ctx = test_context(cfg)
set_up(ctx)
mount_union(ctx)
